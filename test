trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  # Tenant and API details for source (export) and target (import)
  sourceBaseUrl: 'https://<source-tenant>.webmethods.io/integration/rest/v1'
  targetBaseUrl: 'https://<target-tenant>.webmethods.io/integration/rest/v1'
  projectName: '<project_name>'
  sourceApiKey: $(SourceApiKey)  # Define these secrets in ADO pipeline variables
  targetApiKey: $(TargetApiKey)

stages:
  - stage: ExportAssets
    displayName: Export Assets from Source Tenant
    jobs:
      - job: Export
        displayName: Export Project Assets
        steps:
          - task: PowerShell@2
            displayName: "Export Assets from Source Tenant"
            inputs:
              targetType: 'inline'
              script: |
                # Define API headers for source tenant
                $headers = @{
                    "Authorization" = "Bearer $env:sourceApiKey"
                    "Content-Type" = "application/json"
                }

                # Function to list assets in the project
                function List-Assets {
                    $url = "$env:sourceBaseUrl/projects/$env:projectName/assets"
                    $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
                    return $response
                }

                # Function to export each asset individually
                function Export-Asset {
                    param (
                        [string]$AssetId,
                        [string]$AssetName
                    )
                    $url = "$env:sourceBaseUrl/assets/$AssetId/export"
                    $outputPath = "$AssetName.zip"
                    
                    # Download the exported asset to a zip file
                    Invoke-RestMethod -Uri $url -Method Get -Headers $headers -OutFile $outputPath
                    Write-Host "Exported $AssetName successfully."
                }

                # Export all assets in the project
                function Export-ProjectAssets {
                    $assets = List-Assets
                    foreach ($asset in $assets) {
                        $assetId = $asset.id
                        $assetName = $asset.name
                        $assetType = $asset.type
                        Write-Host "Exporting $assetType: $assetName"
                        Export-Asset -AssetId $assetId -AssetName $assetName
                    }
                }

                # Run the export process
                Export-ProjectAssets

          # Publish the exported .zip files as a pipeline artifact
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Exported Assets'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
              artifactName: 'ExportedAssets'
              publishLocation: 'pipeline'

  - stage: ImportAssets
    displayName: Import Assets to Target Tenant
    dependsOn: ExportAssets
    jobs:
      - job: Import
        displayName: Import Project Assets
        steps:
          - download: current
            artifact: ExportedAssets

          - task: PowerShell@2
            displayName: "Import Assets to Target Tenant"
            inputs:
              targetType: 'inline'
              script: |
                # Define API headers for target tenant
                $targetHeaders = @{
                    "Authorization" = "Bearer $env:targetApiKey"
                    "Content-Type" = "application/json"
                }

                # Function to import an asset file
                function Import-Asset {
                    param (
                        [string]$FilePath
                    )
                    $url = "$env:targetBaseUrl/assets/import"
                    $fileContent = [System.IO.File]::ReadAllBytes($FilePath)
                    
                    # Upload the file to target tenant
                    $response = Invoke-RestMethod -Uri $url -Method Post -Headers $targetHeaders -InFile $FilePath -ContentType "multipart/form-data"
                    Write-Host "Imported $FilePath with response: $response"
                }

                # Loop through all .zip files in the downloaded artifact
                function Import-ProjectAssets {
                    $files = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/ExportedAssets" -Filter "*.zip"
                    foreach ($file in $files) {
                        Write-Host "Importing $($file.Name) to target tenant..."
                        Import-Asset -FilePath $file.FullName
                    }
                }

                # Run the import process
                Import-ProjectAssets

{
  "projectName": "SampleProject",
  "assets": {
    "flowServices": [
      { "name": "OrderProcessingService" },
      { "name": "InventoryUpdateService" }
    ],
    "apis": [
      { "name": "OrderAPI" }
    ],
    "referenceData": [
      { "name": "CurrencyRates" }
    ]
  }
}


